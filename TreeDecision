{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# AI Trading"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('/Users/armin/Desktop/Gold.csv')\n",
    "df = df.set_index(pd.DatetimeIndex(df['Date/Time'].values))\n",
    "df.index.name = 'Date'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Price_Up'] = np.where(df['Close'].shift(-1) > df['Close'],1,0)\n",
    "\n",
    "df = df.drop(columns= ['Date/Time'])\n",
    "df = df.drop(columns= ['Name'])\n",
    "df = df.drop(columns= ['Ticker'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Open Interest</th>\n",
       "      <th>Aux1</th>\n",
       "      <th>Aux2</th>\n",
       "      <th>Price_Up</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1978-03-30</th>\n",
       "      <td>211.20000</td>\n",
       "      <td>211.20000</td>\n",
       "      <td>211.20000</td>\n",
       "      <td>211.20000</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>198002</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1978-03-31</th>\n",
       "      <td>215.10001</td>\n",
       "      <td>215.10001</td>\n",
       "      <td>215.10001</td>\n",
       "      <td>215.10001</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>198002</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1978-03-04</th>\n",
       "      <td>212.80000</td>\n",
       "      <td>212.80000</td>\n",
       "      <td>207.50000</td>\n",
       "      <td>207.50000</td>\n",
       "      <td>15</td>\n",
       "      <td>10</td>\n",
       "      <td>198002</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1978-04-04</th>\n",
       "      <td>207.60001</td>\n",
       "      <td>207.60001</td>\n",
       "      <td>206.60001</td>\n",
       "      <td>206.60001</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>198002</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1978-05-04</th>\n",
       "      <td>208.00000</td>\n",
       "      <td>208.00000</td>\n",
       "      <td>208.00000</td>\n",
       "      <td>208.00000</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>198002</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-07-21</th>\n",
       "      <td>1819.59998</td>\n",
       "      <td>1844.90002</td>\n",
       "      <td>1817.19995</td>\n",
       "      <td>1843.90002</td>\n",
       "      <td>318831</td>\n",
       "      <td>603138</td>\n",
       "      <td>202008</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-07-22</th>\n",
       "      <td>1842.80005</td>\n",
       "      <td>1871.80005</td>\n",
       "      <td>1842.09998</td>\n",
       "      <td>1865.09998</td>\n",
       "      <td>452511</td>\n",
       "      <td>609737</td>\n",
       "      <td>202008</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-07-23</th>\n",
       "      <td>1871.59998</td>\n",
       "      <td>1897.69995</td>\n",
       "      <td>1863.09998</td>\n",
       "      <td>1890.00000</td>\n",
       "      <td>513274</td>\n",
       "      <td>608445</td>\n",
       "      <td>202008</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-07-24</th>\n",
       "      <td>1884.90002</td>\n",
       "      <td>1904.59998</td>\n",
       "      <td>1880.50000</td>\n",
       "      <td>1897.50000</td>\n",
       "      <td>387247</td>\n",
       "      <td>607335</td>\n",
       "      <td>202008</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-07-27</th>\n",
       "      <td>1901.19995</td>\n",
       "      <td>1941.90002</td>\n",
       "      <td>1899.00000</td>\n",
       "      <td>1931.00000</td>\n",
       "      <td>578804</td>\n",
       "      <td>0</td>\n",
       "      <td>202008</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10675 rows Ã— 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                  Open        High         Low       Close  Volume  \\\n",
       "Date                                                                 \n",
       "1978-03-30   211.20000   211.20000   211.20000   211.20000       0   \n",
       "1978-03-31   215.10001   215.10001   215.10001   215.10001       1   \n",
       "1978-03-04   212.80000   212.80000   207.50000   207.50000      15   \n",
       "1978-04-04   207.60001   207.60001   206.60001   206.60001       1   \n",
       "1978-05-04   208.00000   208.00000   208.00000   208.00000       0   \n",
       "...                ...         ...         ...         ...     ...   \n",
       "2020-07-21  1819.59998  1844.90002  1817.19995  1843.90002  318831   \n",
       "2020-07-22  1842.80005  1871.80005  1842.09998  1865.09998  452511   \n",
       "2020-07-23  1871.59998  1897.69995  1863.09998  1890.00000  513274   \n",
       "2020-07-24  1884.90002  1904.59998  1880.50000  1897.50000  387247   \n",
       "2020-07-27  1901.19995  1941.90002  1899.00000  1931.00000  578804   \n",
       "\n",
       "            Open Interest    Aux1  Aux2  Price_Up  \n",
       "Date                                               \n",
       "1978-03-30              2  198002     0         1  \n",
       "1978-03-31              3  198002     0         0  \n",
       "1978-03-04             10  198002     0         0  \n",
       "1978-04-04             10  198002     0         1  \n",
       "1978-05-04             10  198002     0         1  \n",
       "...                   ...     ...   ...       ...  \n",
       "2020-07-21         603138  202008     0         1  \n",
       "2020-07-22         609737  202008     0         1  \n",
       "2020-07-23         608445  202008     0         1  \n",
       "2020-07-24         607335  202008     0         1  \n",
       "2020-07-27              0  202008     0         0  \n",
       "\n",
       "[10675 rows x 9 columns]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "X -> Datensatz\n",
    "Y -> Labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df.iloc[:, 0:df.shape[1]-1].values\n",
    "Y = df.iloc[:, df.shape[1]-1].values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Datensatz Split"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Training -> 80%\n",
    "Testing -> 20%"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train,X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## KI Part"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create and Train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.5072599531615926\n"
     ]
    }
   ],
   "source": [
    "tree = DecisionTreeClassifier().fit(X_train, Y_train)\n",
    "print(tree.score(X_test, Y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1 0 0 ... 1 1 1]\n"
     ]
    }
   ],
   "source": [
    "tree_predi = tree.predict(X_test)\n",
    "print(tree_predi)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, ..., 0, 1, 0])"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
